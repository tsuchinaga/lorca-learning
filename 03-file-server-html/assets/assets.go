// Code generated by Lorca. DO NOT EDIT.
package assets

import (
	"bytes"
	"errors"
	"net/http"
	"os"
	"time"
)

var assets = map[string][]byte{}

var FS = &fs{}

type fs struct{}

func (fs *fs) Open(name string) (http.File, error) {
	if name == "/" {
		return fs, nil
	}
	b, ok := assets[name]
	if !ok {
		return nil, os.ErrNotExist
	}
	return &file{name: name, size: len(b), Reader: bytes.NewReader(b)}, nil
}

func (fs *fs) Close() error                                 { return nil }
func (fs *fs) Read(p []byte) (int, error)                   { return 0, nil }
func (fs *fs) Seek(offset int64, whence int) (int64, error) { return 0, nil }
func (fs *fs) Stat() (os.FileInfo, error)                   { return fs, nil }
func (fs *fs) Name() string                                 { return "/" }
func (fs *fs) Size() int64                                  { return 0 }
func (fs *fs) Mode() os.FileMode                            { return 0755 }
func (fs *fs) ModTime() time.Time                           { return time.Time{} }
func (fs *fs) IsDir() bool                                  { return true }
func (fs *fs) Sys() interface{}                             { return nil }
func (fs *fs) Readdir(count int) ([]os.FileInfo, error) {
	files := []os.FileInfo{}
	for name, data := range assets {
		files = append(files, &file{name: name, size: len(data), Reader: bytes.NewReader(data)})
	}
	return files, nil
}

type file struct {
	name string
	size int
	*bytes.Reader
}

func (f *file) Close() error                             { return nil }
func (f *file) Readdir(count int) ([]os.FileInfo, error) { return nil, errors.New("not supported") }
func (f *file) Stat() (os.FileInfo, error)               { return f, nil }
func (f *file) Name() string                             { return f.name }
func (f *file) Size() int64                              { return int64(f.size) }
func (f *file) Mode() os.FileMode                        { return 0644 }
func (f *file) ModTime() time.Time                       { return time.Time{} }
func (f *file) IsDir() bool                              { return false }
func (f *file) Sys() interface{}                         { return nil }

func init() {
	assets["/index.html"] = []byte{0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x6a, 0x61, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x70, 0x3e, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x82, 0x8f, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0xa9, 0xef, 0xbc, 0x91, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x3e, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x82, 0x8f, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0xa9, 0xef, 0xbc, 0x92, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x3e, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x82, 0x8f, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0xa9, 0xef, 0xbc, 0x93, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x3e, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x82, 0x8f, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0xa9, 0xef, 0xbc, 0x94, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x70, 0x3e, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1, 0xe3, 0x82, 0x8f, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0xa9, 0xef, 0xbc, 0x95, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a}
}
